# -*- coding: utf-8 -*-
"""LVADSUSR120-snehao-lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z8ygo4oO0ErcxYkCnkIRuOYwl-u2H5Rx
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import numpy as np
import seaborn as sns
data=pd.read_csv('/content/loan_approval.csv')

data.head()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier as dcl
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix
print(data.isnull().sum())
#there are no null values
data.dropna(inplace=True)
Q1 = data[' income_annum'].quantile(0.25)
Q3 = data[' income_annum'].quantile(0.75)
IQR = Q3 - Q1
data = data[~((data[' income_annum'] < (Q1 - 1.5 * IQR)) | (data[' income_annum'] > (Q3 + 1.5 * IQR)))]
print(data.describe())
print(data.info())
sns.countplot(x=' loan_status', data=data)
plt.title('Loan Status Distribution')
plt.show()
sns.pairplot(data, hue=' loan_status')
plt.title('Pairplot of Features by Loan Status')
plt.show()
label_encoder = LabelEncoder()
data[' education'] = label_encoder.fit_transform(data[[' education']])
data[' loan_status'] = label_encoder.fit_transform(data[[' loan_status']])
data[' self_employed'] = label_encoder.fit_transform(data[[' self_employed']])
X = data.drop(['loan_id', ' loan_status'], axis=1)
y = data[' loan_status']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = dcl()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, pos_label=1)
recall = recall_score(y_test, y_pred, pos_label=1)
cnfsn_matrix = confusion_matrix(y_test, y_pred)
print(f'The Accuracy: {accuracy}')
print(f'The Precision: {precision}')
print(f'Recall: {recall}')
print('Confusion Matrix:')
print(cnfsn_matrix)
sns.heatmap(cnfsn_matrix, annot=True, cmap='coolwarm')
plt.xlabel('Predicted values')
plt.ylabel('True values')
plt.title('Confusion Matrix')
plt.show()







